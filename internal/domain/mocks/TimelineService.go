// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kamkali/go-timeline/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// TimelineService is an autogenerated mock type for the TimelineService type
type TimelineService struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *TimelineService) CreateEvent(ctx context.Context, event *domain.Event) (uint, error) {
	ret := _m.Called(ctx, event)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Event) uint); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEvents provides a mock function with given fields: ctx
func (_m *TimelineService) ListEvents(ctx context.Context) ([]domain.Event, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Event
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Event); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTimelineService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTimelineService creates a new instance of TimelineService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTimelineService(t mockConstructorTestingTNewTimelineService) *TimelineService {
	mock := &TimelineService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
