// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kamkali/go-timeline/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProcessService is an autogenerated mock type for the ProcessService type
type ProcessService struct {
	mock.Mock
}

// CreateProcess provides a mock function with given fields: ctx, t
func (_m *ProcessService) CreateProcess(ctx context.Context, t *domain.Process) (uint, error) {
	ret := _m.Called(ctx, t)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Process) uint); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Process) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProcess provides a mock function with given fields: ctx, id
func (_m *ProcessService) DeleteProcess(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProcess provides a mock function with given fields: ctx, id
func (_m *ProcessService) GetProcess(ctx context.Context, id uint) (domain.Process, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Process
	if rf, ok := ret.Get(0).(func(context.Context, uint) domain.Process); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Process)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProcesses provides a mock function with given fields: ctx
func (_m *ProcessService) ListProcesses(ctx context.Context) ([]domain.Process, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Process
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Process); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Process)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProcess provides a mock function with given fields: ctx, id, process
func (_m *ProcessService) UpdateProcess(ctx context.Context, id uint, process *domain.Process) error {
	ret := _m.Called(ctx, id, process)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *domain.Process) error); ok {
		r0 = rf(ctx, id, process)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProcessService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProcessService creates a new instance of ProcessService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessService(t mockConstructorTestingTNewProcessService) *ProcessService {
	mock := &ProcessService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
