// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/kamkali/go-timeline/internal/timeline"

	mock "github.com/stretchr/testify/mock"
)

// EventService is an autogenerated mock type for the EventService type
type EventService struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *EventService) CreateEvent(ctx context.Context, event *timeline.Event) (uint, error) {
	ret := _m.Called(ctx, event)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, *timeline.Event) uint); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *timeline.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: ctx, id
func (_m *EventService) DeleteEvent(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvent provides a mock function with given fields: ctx, id
func (_m *EventService) GetEvent(ctx context.Context, id uint) (timeline.Event, error) {
	ret := _m.Called(ctx, id)

	var r0 timeline.Event
	if rf, ok := ret.Get(0).(func(context.Context, uint) timeline.Event); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(timeline.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEvents provides a mock function with given fields: ctx
func (_m *EventService) ListEvents(ctx context.Context) ([]timeline.Event, error) {
	ret := _m.Called(ctx)

	var r0 []timeline.Event
	if rf, ok := ret.Get(0).(func(context.Context) []timeline.Event); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]timeline.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, id, event
func (_m *EventService) UpdateEvent(ctx context.Context, id uint, event *timeline.Event) error {
	ret := _m.Called(ctx, id, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *timeline.Event) error); ok {
		r0 = rf(ctx, id, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEventService interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventService creates a new instance of EventService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventService(t mockConstructorTestingTNewEventService) *EventService {
	mock := &EventService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
