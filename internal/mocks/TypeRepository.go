// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/kamkali/go-timeline/internal/timeline"

	mock "github.com/stretchr/testify/mock"
)

// TypeRepository is an autogenerated mock type for the TypeRepository type
type TypeRepository struct {
	mock.Mock
}

// CreateType provides a mock function with given fields: ctx, t
func (_m *TypeRepository) CreateType(ctx context.Context, t *timeline.Type) (uint, error) {
	ret := _m.Called(ctx, t)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, *timeline.Type) uint); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *timeline.Type) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteType provides a mock function with given fields: ctx, id
func (_m *TypeRepository) DeleteType(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetType provides a mock function with given fields: ctx, id
func (_m *TypeRepository) GetType(ctx context.Context, id uint) (timeline.Type, error) {
	ret := _m.Called(ctx, id)

	var r0 timeline.Type
	if rf, ok := ret.Get(0).(func(context.Context, uint) timeline.Type); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(timeline.Type)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTypes provides a mock function with given fields: ctx
func (_m *TypeRepository) ListTypes(ctx context.Context) ([]timeline.Type, error) {
	ret := _m.Called(ctx)

	var r0 []timeline.Type
	if rf, ok := ret.Get(0).(func(context.Context) []timeline.Type); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]timeline.Type)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateType provides a mock function with given fields: ctx, id, Type
func (_m *TypeRepository) UpdateType(ctx context.Context, id uint, Type *timeline.Type) error {
	ret := _m.Called(ctx, id, Type)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *timeline.Type) error); ok {
		r0 = rf(ctx, id, Type)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTypeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTypeRepository creates a new instance of TypeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTypeRepository(t mockConstructorTestingTNewTypeRepository) *TypeRepository {
	mock := &TypeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
